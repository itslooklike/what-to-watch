// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id             String    @id @default(uuid()) @postgresql.Uuid
  name           String    @default("")
  email          String    @unique @default("")
  password       String
  posts          Post[]    @relation("Post_author")
  favoriteFilms  Film[]    @relation("User_favoriteFilms")
  favoriteActors Actor[]   @relation("User_favoriteActors")
  comments       Comment[] @relation("Comment_user")
}

model Post {
  id          String    @id @default(uuid()) @postgresql.Uuid
  title       String    @default("")
  status      String?   @default("draft")
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author") @postgresql.Uuid
  tags        Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(uuid()) @postgresql.Uuid
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Film {
  id                      String    @id @default(uuid()) @postgresql.Uuid
  name                    String    @default("")
  description             String    @default("")
  released                Int?
  backgroundColor         String    @default("")
  rating                  Float?
  scoresCount             Int?
  director                String    @default("")
  videoLink               String    @default("")
  videoPreviewLink        String    @default("")
  starring                Actor[]   @relation("Actor_films")
  runTime                 Int?
  genre                   Genre?    @relation("Film_genre", fields: [genreId], references: [id])
  genreId                 String?   @map("genre") @postgresql.Uuid
  comments                Comment[] @relation("Comment_film")
  imagePoster             Json?
  imagePreview            Json?
  imageBackground         Json?
  from_User_favoriteFilms User[]    @relation("User_favoriteFilms")

  @@index([genreId])
}

model Comment {
  id      String    @id @default(uuid()) @postgresql.Uuid
  comment String    @default("")
  rating  Int?
  date    DateTime?
  film    Film?     @relation("Comment_film", fields: [filmId], references: [id])
  filmId  String?   @map("film") @postgresql.Uuid
  user    User?     @relation("Comment_user", fields: [userId], references: [id])
  userId  String?   @map("user") @postgresql.Uuid

  @@index([filmId])
  @@index([userId])
}

model Genre {
  id    String @id @default(uuid()) @postgresql.Uuid
  name  String @default("")
  films Film[] @relation("Film_genre")
}

model Actor {
  id                       String @id @default(uuid()) @postgresql.Uuid
  name                     String @default("")
  films                    Film[] @relation("Actor_films")
  from_User_favoriteActors User[] @relation("User_favoriteActors")
}