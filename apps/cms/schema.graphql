# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  favoriteFilms(
    where: FilmWhereInput! = {}
    orderBy: [FilmOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Film!]
  favoriteFilmsCount(where: FilmWhereInput! = {}): Int
  favoriteActors(
    where: ActorWhereInput! = {}
    orderBy: [ActorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Actor!]
  favoriteActorsCount(where: ActorWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  favoriteFilms: FilmManyRelationFilter
  favoriteActors: ActorManyRelationFilter
  comments: CommentManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input FilmManyRelationFilter {
  every: FilmWhereInput
  some: FilmWhereInput
  none: FilmWhereInput
}

input ActorManyRelationFilter {
  every: ActorWhereInput
  some: ActorWhereInput
  none: ActorWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  favoriteFilms: FilmRelateToManyForUpdateInput
  favoriteActors: ActorRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input FilmRelateToManyForUpdateInput {
  disconnect: [FilmWhereUniqueInput!]
  set: [FilmWhereUniqueInput!]
  create: [FilmCreateInput!]
  connect: [FilmWhereUniqueInput!]
}

input ActorRelateToManyForUpdateInput {
  disconnect: [ActorWhereUniqueInput!]
  set: [ActorWhereUniqueInput!]
  create: [ActorCreateInput!]
  connect: [ActorWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  favoriteFilms: FilmRelateToManyForCreateInput
  favoriteActors: ActorRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input FilmRelateToManyForCreateInput {
  create: [FilmCreateInput!]
  connect: [FilmWhereUniqueInput!]
}

input ActorRelateToManyForCreateInput {
  create: [ActorCreateInput!]
  connect: [ActorWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Film {
  id: ID!
  name: String
  description: String
  released: Int
  backgroundColor: String
  rating: Float
  scoresCount: Int
  director: String
  videoLink: String
  videoPreviewLink: String
  starring(
    where: ActorWhereInput! = {}
    orderBy: [ActorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Actor!]
  starringCount(where: ActorWhereInput! = {}): Int
  runTime: Int
  genre: Genre
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  imagePoster: CloudinaryImage_File
  imagePreview: CloudinaryImage_File
  imageBackground: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input FilmWhereUniqueInput {
  id: ID
}

input FilmWhereInput {
  AND: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  NOT: [FilmWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  released: IntNullableFilter
  backgroundColor: StringFilter
  rating: FloatNullableFilter
  scoresCount: IntNullableFilter
  director: StringFilter
  videoLink: StringFilter
  videoPreviewLink: StringFilter
  starring: ActorManyRelationFilter
  runTime: IntNullableFilter
  genre: GenreWhereInput
  comments: CommentManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input FilmOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  released: OrderDirection
  backgroundColor: OrderDirection
  rating: OrderDirection
  scoresCount: OrderDirection
  director: OrderDirection
  videoLink: OrderDirection
  videoPreviewLink: OrderDirection
  runTime: OrderDirection
}

input FilmUpdateInput {
  name: String
  description: String
  released: Int
  backgroundColor: String
  rating: Float
  scoresCount: Int
  director: String
  videoLink: String
  videoPreviewLink: String
  starring: ActorRelateToManyForUpdateInput
  runTime: Int
  genre: GenreRelateToOneForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  imagePoster: Upload
  imagePreview: Upload
  imageBackground: Upload
}

input GenreRelateToOneForUpdateInput {
  create: GenreCreateInput
  connect: GenreWhereUniqueInput
  disconnect: Boolean
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input FilmUpdateArgs {
  where: FilmWhereUniqueInput!
  data: FilmUpdateInput!
}

input FilmCreateInput {
  name: String
  description: String
  released: Int
  backgroundColor: String
  rating: Float
  scoresCount: Int
  director: String
  videoLink: String
  videoPreviewLink: String
  starring: ActorRelateToManyForCreateInput
  runTime: Int
  genre: GenreRelateToOneForCreateInput
  comments: CommentRelateToManyForCreateInput
  imagePoster: Upload
  imagePreview: Upload
  imageBackground: Upload
}

input GenreRelateToOneForCreateInput {
  create: GenreCreateInput
  connect: GenreWhereUniqueInput
}

type Comment {
  id: ID!
  comment: String
  rating: Int
  date: DateTime
  film: Film
  user: User
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  comment: StringFilter
  rating: IntNullableFilter
  date: DateTimeNullableFilter
  film: FilmWhereInput
  user: UserWhereInput
}

input CommentOrderByInput {
  id: OrderDirection
  comment: OrderDirection
  rating: OrderDirection
  date: OrderDirection
}

input CommentUpdateInput {
  comment: String
  rating: Int
  date: DateTime
  film: FilmRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input FilmRelateToOneForUpdateInput {
  create: FilmCreateInput
  connect: FilmWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  comment: String
  rating: Int
  date: DateTime
  film: FilmRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input FilmRelateToOneForCreateInput {
  create: FilmCreateInput
  connect: FilmWhereUniqueInput
}

type Genre {
  id: ID!
  name: String
  films(
    where: FilmWhereInput! = {}
    orderBy: [FilmOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Film!]
  filmsCount(where: FilmWhereInput! = {}): Int
}

input GenreWhereUniqueInput {
  id: ID
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  id: IDFilter
  name: StringFilter
  films: FilmManyRelationFilter
}

input GenreOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input GenreUpdateInput {
  name: String
  films: FilmRelateToManyForUpdateInput
}

input GenreUpdateArgs {
  where: GenreWhereUniqueInput!
  data: GenreUpdateInput!
}

input GenreCreateInput {
  name: String
  films: FilmRelateToManyForCreateInput
}

type Actor {
  id: ID!
  name: String
  films(
    where: FilmWhereInput! = {}
    orderBy: [FilmOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Film!]
  filmsCount(where: FilmWhereInput! = {}): Int
}

input ActorWhereUniqueInput {
  id: ID
}

input ActorWhereInput {
  AND: [ActorWhereInput!]
  OR: [ActorWhereInput!]
  NOT: [ActorWhereInput!]
  id: IDFilter
  name: StringFilter
  films: FilmManyRelationFilter
}

input ActorOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ActorUpdateInput {
  name: String
  films: FilmRelateToManyForUpdateInput
}

input ActorUpdateArgs {
  where: ActorWhereUniqueInput!
  data: ActorUpdateInput!
}

input ActorCreateInput {
  name: String
  films: FilmRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFilm(data: FilmCreateInput!): Film
  createFilms(data: [FilmCreateInput!]!): [Film]
  updateFilm(where: FilmWhereUniqueInput!, data: FilmUpdateInput!): Film
  updateFilms(data: [FilmUpdateArgs!]!): [Film]
  deleteFilm(where: FilmWhereUniqueInput!): Film
  deleteFilms(where: [FilmWhereUniqueInput!]!): [Film]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createGenre(data: GenreCreateInput!): Genre
  createGenres(data: [GenreCreateInput!]!): [Genre]
  updateGenre(where: GenreWhereUniqueInput!, data: GenreUpdateInput!): Genre
  updateGenres(data: [GenreUpdateArgs!]!): [Genre]
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  deleteGenres(where: [GenreWhereUniqueInput!]!): [Genre]
  createActor(data: ActorCreateInput!): Actor
  createActors(data: [ActorCreateInput!]!): [Actor]
  updateActor(where: ActorWhereUniqueInput!, data: ActorUpdateInput!): Actor
  updateActors(data: [ActorUpdateArgs!]!): [Actor]
  deleteActor(where: ActorWhereUniqueInput!): Actor
  deleteActors(where: [ActorWhereUniqueInput!]!): [Actor]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  films(
    where: FilmWhereInput! = {}
    orderBy: [FilmOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Film!]
  film(where: FilmWhereUniqueInput!): Film
  filmsCount(where: FilmWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  genres(
    where: GenreWhereInput! = {}
    orderBy: [GenreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Genre!]
  genre(where: GenreWhereUniqueInput!): Genre
  genresCount(where: GenreWhereInput! = {}): Int
  actors(
    where: ActorWhereInput! = {}
    orderBy: [ActorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Actor!]
  actor(where: ActorWhereUniqueInput!): Actor
  actorsCount(where: ActorWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
